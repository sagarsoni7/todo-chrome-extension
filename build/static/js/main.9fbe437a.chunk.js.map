{"version":3,"sources":["components/topBar/index.module.css","components/topBar/clock/index.js","components/topBar/TopBar.js","components/addGroup/index.js","components/todo/todoItem/index.js","components/todo/addItem/index.js","components/todo/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyComponent","format","ticking","React","Component","TopBar","useState","quote","setQuote","useEffect","axios","get","then","res","data","contents","quotes","document","body","style","backgroundImage","background","backgroundPosition","backgroundSize","backgroundRepeat","backgroundAttachment","className","classes","Clock","AddGroup","addGroup","value","setValue","onSubmit","e","preventDefault","type","id","placeholder","onChange","target","TodoItem","todo","index","completeTodo","removeTodo","groupIndex","textDecoration","isCompleted","text","textAlign","onClick","icon","faCheck","color","faTimes","AddItem","addItem","border","backgroundColor","fontWeight","Todo","todos","groupName","removeGroup","map","key","fontSize","App","setTodos","newTodos","content","push","splice","class","todogroup","todoData","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9fbe437a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Clock\":\"topBar_Clock__2YnaJ\"};","import React  from 'react';\nimport Clock from 'react-live-clock';\n \nexport default class MyComponent extends React.Component {\n    render() {\n        return (\n            <div>\n            <Clock format={'hh:mm:ss'} ticking={true} />\n            </div>\n        )\n    }\n}","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport Clock from \"./clock/index.js\";\nimport classes from \"./index.module.css\";\n\nconst TopBar=()=>{\n    const [quote, setQuote] = useState(\"Loading quote...\");\n\n    useEffect(() => {\n        // Update the document title using the browser API\n        axios.get(\"http://quotes.rest/qod.json\")\n        .then((res)=>{\n           setQuote(res.data.contents.quotes[0].quote);  \n           document.body.style.backgroundImage=\"url(\"+res.data.contents.quotes[0].background+\")\"; \n           document.body.style.backgroundPosition= \"center\"; \n           document.body.style.backgroundSize= \"cover\"; \n           document.body.style.backgroundRepeat= \"no-repeat\"; \n           document.body.style.backgroundAttachment= \"fixed\"; \n        })\n       \n      });\n\n    return (\n      <div>\n        <div className={classes.Clock}>\n          <Clock />\n        </div>\n        <span>\"{quote}\"</span>\n      </div>\n    );\n  \n}\nexport default TopBar;\n","import React,{useState} from \"react\";\n\nfunction AddGroup({addGroup}){\n\n    const [value, setValue]=useState(\" \");\n\n    const handleSubmit=e=>{\n        e.preventDefault();\n        if(!value) return;\n        addGroup(value);\n        setValue(\"\");\n    };\n\n    return(\n      <>\n        <div className=\"col-md-12\">\n        <div className=\"main-todo-input-wrap\">\n          <div className=\"main-todo-input fl-wrap\">\n          <form onSubmit={handleSubmit}>\n            <div className=\"main-todo-input-item\">\n              {\" \"}\n              \n              <input\n                type=\"text\"\n                id=\"todo-list-item\"\n                value={value}\n                placeholder=\"Enter group name...\"\n                onChange={e=>setValue(e.target.value)}\n              />{\" \"}\n              \n            </div>{\" \"}\n            <input type=\"submit\" value=\"Create\" className=\"add-items main-search-button\"/>\n            </form>\n          </div>\n        </div>\n      </div>\n      </>\n    );\n};\n\nexport default AddGroup;","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes,faCheck } from '@fortawesome/free-solid-svg-icons';\n\nfunction TodoItem({ todo, index, completeTodo, removeTodo,groupIndex }) {\n  return (\n         \n  <tr style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}>\n    <td>{todo.text}</td>\n    <td style={{textAlign:\"center\"}}><FontAwesomeIcon onClick={() => completeTodo(groupIndex,index)} icon={faCheck}  color=\"green\"/></td>\n    <td style={{textAlign:\"center\"}}><FontAwesomeIcon onClick={() => removeTodo(groupIndex,index)} icon={faTimes}  color=\"red\"/></td>\n  </tr>\n  );\n}\n\nexport default TodoItem;\n","import React, { useState } from \"react\";\n\nfunction AddItem({ groupIndex, addItem }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addItem(value, groupIndex);\n    setValue(\"\");\n  };\n\n\n  return (\n    <tr>\n      <td>\n        <input\n          style={{ border: \"none\", backgroundColor:\"transparent\" }}\n          type=\"text\"\n          placeholder=\"add something to group...\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n                  />\n      </td>\n      <td\n        onClick={handleSubmit}\n        style={{ fontWeight: \"bold\", textAlign: \"center\", color: \"#4DB7FE\" }}\n      >\n        Add\n      </td>\n      <td></td>\n    </tr>\n  );\n}\n\nexport default AddItem;\n","import React from \"react\";\nimport TodoItem from \"./todoItem\";\nimport AddItem from \"./addItem\";\nimport \"./todo.css\";\n\nfunction Todo({\n  completeTodo,\n  removeTodo,\n  todos,\n  groupName,\n  groupIndex,\n  removeGroup,\n  addItem\n}) {\n  return (\n    <div className=\"col-md-12\">\n      <div className=\"main-todo-input-wrap\">\n        <div className=\"main-todo-input fl-wrap todo-listing\">\n        \n          <ul id=\"list-items\">\n            <table id=\"customers\">\n              <tr>\n                <th>{groupName}{\" \"}</th>\n                <th>Tick Item</th>\n                <th>Remove Item</th>\n              </tr>\n              {todos.map((todo, index) => (\n                <TodoItem\n                  key={index}\n                  index={index}\n                  todo={todo}\n                  completeTodo={completeTodo}\n                  removeTodo={removeTodo}\n                  groupIndex={groupIndex}\n                />\n              ))}\n              <AddItem groupIndex={groupIndex} addItem={addItem} />\n            <tr>\n              <td></td>\n              <td></td>\n              <td style={{textAlign:\"right\"}}><span\n                    style={{color:\"red\",fontSize:\"80%\"}}\n                    onClick={() => removeGroup(groupIndex)}                    \n                    \n                  >Delete Group</span></td>\n            </tr>\n            </table>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Todo;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TopBar from \"./components/topBar/TopBar\";\nimport AddGroup from \"./components/addGroup\";\nimport Todo from \"./components/todo\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  const addGroup = text => {\n    const newTodos = [...todos, { content:[],todogroup:text }];\n    setTodos(newTodos);\n  };\n\n  const addItem = (text,groupIndex) => {\n    const newTodos = [...todos];\n    newTodos[groupIndex].content.push({\n      text:text,\n      isCompleted:false\n    })\n    setTodos(newTodos);\n  };\n\n  const completeTodo = (groupIndex,index) => {\n    const newTodos = [...todos];\n    newTodos[groupIndex].content[index].isCompleted = true;\n    setTodos(newTodos);\n  };\n\n  const removeGroup=groupIndex=>{\n    const newTodos = [...todos];\n    newTodos.splice(groupIndex,1);\n    setTodos(newTodos);\n  }\n\n  const removeTodo = (groupIndex,index) => {\n    const newTodos = [...todos];\n    newTodos[groupIndex].content.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div>\n      <div className=\"topbar\">\n        <TopBar />\n      </div>\n\n      <div className=\"main\">\n        <div class=\"row\">\n          <AddGroup addGroup={addGroup} />\n        </div>\n        <div className=\"row\">\n          {todos.map((todoData, index) => (\n            <Todo\n              completeTodo={completeTodo}\n              removeTodo={removeTodo}\n              todos={todoData.content}\n              groupName={todoData.todogroup}\n              groupIndex={index}\n              removeGroup={removeGroup}\n              addItem={addItem}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}